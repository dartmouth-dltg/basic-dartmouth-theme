// -------------------------------------

// Project: DCL Web Frontend Development Automation
// NOTE: Updated for Gulp 4, Jul 2019

// -------------------------------------

// Available tasks:
// `gulp`
// `gulp build`
// `gulp clean`
// `gulp test:css`
// `gulp test:pa11y`
// `gulp watch`

// -------------------------------------

// -------------------------------------
// Modules
// -------------------------------------

// gulp              : The streaming build system
// gulp-autoprefixer : Prefix CSS
// gulp-concat       : Concatenate files
// gulp-clean-css    : Minify CSS
// gulp-load-plugins : Automatically load Gulp plugins
// gulp-rename       : Rename files
// gulp-sass         : Compile Sass
// gulp-sass-glob    : Provide Sass Globbing
// gulp-sass-lint    : Lint Sass
// gulp-sourcemaps   : Generate sourcemaps
// gulp-watch        : Watch stream
// browser-sync      : Device and browser testing tool
// del               : delete
// gulp-eslint       : JavaScript code quality tool
// gulp-uglify       : Minify JavaScript with UglifyJS
// -------------------------------------

const $ = {};

$.browserSync = require("browser-sync").create();
$.del = require("del");
$.gulp = require("gulp");
$.noop = require("gulp-noop");
$.Path = require("path");
$._ = require("lodash");

const $gf = require("./gulpfuncs");

// Variable options and paths are separated out into gulp-config.js
// and passed in to us during the require.
let $conf;

/** Compile SASS files into CSS
 * @return {stream} the Node stream representing the compiled files.
 */
function lintAndCompileSASS() {
  return $gf.lintAndCompileSASS($conf.sass.sources, $conf.sass.destination);
}

function noop(cb) {
  cb();
}

// Validate the JavaScript sources
function jsLint(cb) {
  const srcs = $._.get($conf, "js.sources");
  if (srcs === undefined) return noop(cb);

  return $gf.jsLint(srcs);
}

// Produce uglified JavaScript files
function js(cb) {
  const srcs = $._.get($conf, "js.sources");
  if (srcs === undefined) return noop(cb);

  return $gf.jsUglify(srcs, $conf.js.destination).pipe($.browserSync.stream());
}

// Validate the Gulp files
function gulpJsLint(/* cb */) {
  return $gf.jsLint($conf.gulp.files);
}

// Validate the composer.json file
function composerJsonLint(/* cb */) {
  return $gf.jsLint("./composer.json");
}

// Gulp tasks: CSS
function catenateCSS(cb) {
  if ($._.get($conf, "css.concatenate") === undefined) return noop(cb);

  let tasks = [];
  for (let x = 0; x < $conf.css.concatenate.length; x++) {
    const { sources, destination } = $conf.css.concatenate[x];
    const task = (fcb) => {
      $gf.concatCSS(sources, destination);
      fcb();
    };
    tasks = tasks.concat(task);
  }

  return $.gulp.parallel.apply(null, tasks)(cb);
}

function minifyCSS(cb) {
  let srcs = $._.get($conf, "css.sources");

  if (srcs === undefined) return noop(cb);

  if ($conf.css.exclude !== undefined) {
    srcs = srcs.concat($conf.css.exclude.map((p) => `!${p}`));
  }

  return $gf
    .minifyCSS(srcs, $conf.css.destination)
    .pipe($.browserSync.stream());
}

function moveCSS(cb) {
  let srcs = $._.get($conf, "css.sources");

  if (srcs === undefined) return noop(cb);

  if ($conf.css.exclude !== undefined) {
    srcs = srcs.concat($conf.css.exclude.map((p) => `!${p}`));
  }

  return $gf
    .moveCSS(srcs, $conf.css.destination)
    .pipe($.browserSync.stream());
}


// Gulp tasks: delete compiled files
function clean(cb) {
  const srcs = [
    $._.get($conf, "product.dirs"),
    $._.get($conf, "product.files"),
  ];

  return $.del($._.flatMap($._.filter(srcs)), cb);
}

function sync(cb) {
  const options = {
    files: $._.flatMap(
      $._.filter([$._.get($conf, "css.sources"), $._.get($conf, "js.sources")])
    ),

    proxy: {
      // Enter Site URL to load
      target: $conf.browserSync.proxyTarget,
    },

    // Enter browser names to see the site
    browser: ["google chrome", "firefox", "safari"],

    open: true,
  };

  $.browserSync.init(options);
  cb();
}

function syncReload(cb) {
  $.browserSync.reload();
  cb();
}

// Record checksums of all the source files so
// CI/CD can later validate the build products
// against the sources.
function updateSourceChecksums(cb) {
  const checksums = $._.get($conf, "product.checksums");
  if (checksums === undefined) return noop(cb);

  const srcs = [$._.get($conf, "js.sources"), $._.get($conf, "sass.sources")];

  return $gf.updateSourceChecksums($._.flatMap($._.filter(srcs)), checksums);
}

// Gulp tasks: watch and browserSync
function watchFiles(/* cb */) {
  // Build Javascript when sources change
  const jsSrc = $._.get($conf, "js.sources");
  if (jsSrc !== undefined) {
    $.gulp.watch(jsSrc, $.gulp.series(jsLint, js));
  }

  // Build CSS from SASS
  $.gulp.watch(
    $conf.sass.sources,
    $.gulp.series(lintAndCompileSASS, minifyCSS)
  );

  // Reload browser when build products change
  $.gulp.watch($conf.product.files).on("change", syncReload);
}

// Gulp complex tasks
const build = $.gulp.series(
  clean,
  // Minor race condition here.  If edit happens after
  // compile before checksum, it won't be detectable.
  // Work around:  Don't edit while compiling!
  $.gulp.parallel(lintAndCompileSASS, js, updateSourceChecksums, catenateCSS),
  minifyCSS
);

// Gulp complex tasks
const ubuild = $.gulp.series(
  clean,
  // Minor race condition here.  If edit happens after
  // compile before checksum, it won't be detectable.
  // Work around:  Don't edit while compiling!
  $.gulp.parallel(lintAndCompileSASS, js, updateSourceChecksums, catenateCSS),
  moveCSS
);

const watchSync = $.gulp.parallel(sync, watchFiles);

module.exports = (config) => {
  $conf = config;

  const exports = {
    // Gulp public tasks
    clean,
    build,
    ubuild,
    default: build,
    watch: watchSync,

    // Gulp public sub-tasks
    cat: catenateCSS,
    sass: lintAndCompileSASS,
    js,
    gulpJsLint,
    composerJsonLint,
    jsLint,
    minify: minifyCSS,
  };

  return exports;
};

// Credits:
// - http://drewbarontini.com/articles/building-a-better-gulpfile/
// - https://teamgaslight.com/blog/small-sips-of-gulp-dot-js-4-steps-to-reduce-complexity
// - http://cgit.drupalcode.org/zen/tree/STARTERKIT/gulpfile.js?h=7.x-6.x
// - https://github.com/google/web-starter-kit/blob/master/gulpfile.js
// - https://gist.github.com/tristanisfeld/9deea503260324f5e9b0 (Gulp 4 version)
// - https://gist.github.com/jeromecoupe/0b807b0c1050647eb340360902c3203a
